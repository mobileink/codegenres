8 Concrete syntax ISO/IEC 13568:2002(E)

A parser conforming to this concrete syntax converts a concrete
sentence to a parse tree.  The non-terminal symbols of the concrete
syntax that are written as mathematical symbols or are entirely
CAPITALIZED or Roman are Z tokens defined in the lexis (claue 7). The
other non-terminal symbols are written in MixedCase and are defined
within the concrete syntax.

8.2 Formal definition of concrete syntax

Copyright notice

The reproduction of this clause is permitted on the understanding that
this material is public domain, and on the condition that this
International Standard is referenced as the source document.  With the
exception of clauses 6.2, 7.2, 8.2, 11 and annex B, all other parts of
the text are subject to the usual copyright rules stated on page ii of
this International Standard.

Specification = { Section } (* sectioned specification *)
| { Paragraph } (* anonymous specification *)
;
Section = ZED , section , NAME , parents , [ NAME , { ;-tok , NAME } ] , END ,
{ Paragraph } (* inheriting section *)
| ZED , section , NAME , END , { Paragraph } (* base section *)
;
Paragraph = ZED , [-tok , NAME , { ;-tok , NAME } , ]-tok , END (* given types *)
| AX , SchemaText , END	       	   	 (* axiomatic description *)
| SCH , NAME , SchemaText , END 	 (* schema definition *)
| GENAX , [-tok , Formals , ]-tok , SchemaText , END	      (* generic axiomatic description *)
| GENSCH , NAME , [-tok , Formals , ]-tok , SchemaText , END  (* generic schema denition *)
| ZED , DeclName , == , Expression , END    	       	      (* horizontal definition *)
| ZED , NAME , [-tok , Formals , ]-tok , == , Expression , END (* generic horizontal denition *)
| ZED , GenName , == , Expression , END (* generic operator definition *)
| ZED , Freetype , { & , Freetype } , END (* free types *)
| ZED , `? , Predicate , END (* conjecture *)
| ZED , [-tok , Formals , ]-tok , `? , Predicate , END (* generic conjecture *)
| ZED , OperatorTemplate , END (* operator template *)
;

Freetype = NAME , ::= , Branch , { |-tok , Branch } ; (* free type *)

Branch = DeclName , [《, Expression, 》] ; (* element or injection *)

Formals = NAME , { ,-tok , NAME } ;  	 (* generic parameters *)

Predicate = Predicate, NL , Predicate (* newline conjunction *)
	  | Predicate, ;-tok , Predicate (* semicolon conjunction *)
	  | ∀, SchemaText, ⦁ , Predicate (* universal quantification *)  ;; Z NOTATION SPOT: U+2981
| ∃, SchemaText ,  , Predicate (* existential quantification *)
| ∃₁, SchemaText,  , Predicate (* unique existential quantification *)
| Predicate, ⇔,Predicate 	 (* equivalence *)
| Predicate, ⇒, Predicate	 (* implication *)
| Predicate, ∨, Predicate	 (* disjunction *)
| Predicate, ∧, Predicate	 (* conjunction *)
| ¬, Predicate			 (* negation *)


c ISO/IEC 2002|All rights reserved		31



ISO/IEC 13568:2002(E) 8 Concrete syntax
| Relation (* relation operator application *)
| Expression (* schema predicate *)
| true (* truth *)
| false (* falsity *)
| (-tok , Predicate , )-tok (* parenthesized predicate *)
;
Expression = 8 , SchemaText ,  , Expression (* schema universal quantication *)
| 9 , SchemaText ,  , Expression (* schema existential quantication *)
| 9
1 , SchemaText ,  , Expression (* schema unique existential quantication *)
|  , SchemaText ,  , Expression (* function construction *)
|  , SchemaText ,  , Expression (* denite description *)
| let , DeclName , == , Expression ,
{ ; -tok , DeclName , == , Expression } ,
 , Expression (* substitution expression *)
| Expression , , , Expression (* schema equivalence *)
| Expression , ) , Expression (* schema implication *)
| Expression , _ , Expression (* schema disjunction *)
| Expression , ^ , Expression (* schema conjunction *)
| : , Expression (* schema negation *)
| if , Predicate , then , Expression , else , Expression (* conditional *)
| Expression , o9
, Expression (* schema composition *)
| Expression , >> , Expression (* schema piping *)
| Expression , n , (-tok , DeclName , { ;-tok , DeclName } , )-tok
(* schema hiding *)
| Expression ,  , Expression (* schema projection *)
| pre , Expression (* schema precondition *)
| Expression ,  , Expression , {  , Expression } (* Cartesian product *)
| P , Expression (* powerset *)
| Application (* function and generic operator application *)
| Expression , Expression (* application *)
| Expression , STROKE (* schema decoration *)
| Expression , [-tok , DeclName , = , DeclName ,
{ ;-tok , DeclName , = , DeclName } , ]-tok (* schema renaming *)
| Expression , : , RefName (* binding selection *)
| Expression , : , NUMERAL (* tuple selection *)
|  , Expression , { STROKE } (* binding construction *)
| RefName (* reference *)
| RefName , [-tok , Expression , { ;-tok , Expression } , ]-tok
(* generic instantiation *)
| NUMERAL (* number literal *)
| f-tok , [ Expression , { ;-tok , Expression } ] , g-tok (* set extension *)
| f-tok , SchemaText ,  , Expression , g-tok (* set comprehension *)
| ( ( f-tok , SchemaText , g-tok ) | ( f-tok , g-tok ) )
| ( f-tok , Expression , g-tok )
(* characteristic set comprehension *)
| ( [-tok , SchemaText , ]-tok ) | ( [-tok , Expression , ]-tok )
(* schema construction *)
| hj , [ DeclName , == , Expression ,
{ ;-tok , DeclName , == , Expression } ] , ji (* binding extension *)
| (-tok , Expression , ;-tok , Expression , { ;-tok , Expression } , )-tok
(* tuple extension *)
| (-tok ,  , SchemaText , )-tok (* characteristic denite description *)

32 	     c ISO/IEC 2002|All rights reserved



8 Concrete syntax ISO/IEC 13568:2002(E)
| (-tok , Expression , )-tok (* parenthesized expression *)
;
SchemaText = [ DeclPart ] , [ j-tok , Predicate ] ;
DeclPart = Declaration , { ( ; -tok | NL ) , Declaration } ;
Declaration = DeclName , { ;-tok , DeclName } , : , Expression
| DeclName , == , Expression
| Expression
;
OperatorTemplate = relation , Template
| function , CategoryTemplate
| generic , CategoryTemplate
;
CategoryTemplate = PrefixTemplate
| PostfixTemplate
| Prec , Assoc , InfixTemplate
| NofixTemplate
;
Prec = NUMERAL ;
Assoc = leftassoc
| rightassoc
;
Template = PrefixTemplate
| PostfixTemplate
| InfixTemplate
| NofixTemplate
;
PrefixTemplate = (-tok , PrefixName , )-tok
| (-tok , P , , )-tok
;
PostfixTemplate = (-tok , PostfixName , )-tok ;
InfixTemplate = (-tok , InfixName , )-tok ;
NofixTemplate = (-tok , NofixName , )-tok ;
DeclName = NAME
| OpName
;
RefName = NAME
| (-tok , OpName , )-tok
;
OpName = PrefixName
| PostfixName
| InfixName
| NofixName
;
c ISO/IEC 2002|All rights reserved		33



ISO/IEC 13568:2002(E) 8 Concrete syntax
PrefixName = PRE ,
| PREP ,
| L , { , ES | ; ; , SS } , ( , ERE | ; ; , SRE ) ,
| LP , { , ES | ; ; , SS } , ( , EREP | ; ; , SREP ) ,
;
PostfixName = , POST
| , POSTP
| , EL , { , ES | ; ; , SS } , ( , ER | ; ; , SR )
| , ELP , { , ES | ; ; , SS } , ( , ERP | ; ; , SRP )
;
InfixName = , I ,
| , IP ,
| , EL , { , ES | ; ; , SS } , ( , ERE | ; ; , SRE ) ,
| , ELP , { , ES | ; ; , SS } , ( , EREP | ; ; , SREP ) ,
;
NofixName = L , { , ES | ; ; , SS } , ( , ER | ; ; , SR )
| LP , { , ES | ; ; , SS } , ( , ERP | ; ; , SRP )
;
GenName = PrefixGenName
| PostfixGenName
| InfixGenName
| NofixGenName
;
PrefixGenName = PRE , NAME
| L , { NAME , ( ES | SS ) } , NAME , ( ERE | SRE ) , NAME
;
PostfixGenName = NAME , POST
| NAME , EL , { NAME , ( ES | SS ) } , NAME , ( ER | SR )
;
InfixGenName = NAME , I , NAME
| NAME , EL , { NAME , ( ES | SS ) } , NAME , ( ERE | SRE ) , NAME
;
NofixGenName = L , { NAME , ( ES | SS ) } , NAME , ( ER | SR ) ;
Relation = PrefixRel
| PostfixRel
| InfixRel
| NofixRel
;
PrefixRel = PREP , Expression
| LP , ExpSep , ( Expression , EREP | ExpressionList , SREP ) , Expression
;
PostfixRel = Expression , POSTP
| Expression , ELP , ExpSep , ( Expression , ERP | ExpressionList , SRP )
;
34		c ISO/IEC 2002|All rights reserved



8 Concrete syntax ISO/IEC 13568:2002(E)
InfixRel = Expression , ( 2 | =-tok | IP ) , Expression ,
{ ( 2 | =-tok | IP ) , Expression }
| Expression , ELP , ExpSep ,
( Expression , EREP | ExpressionList , SREP ) , Expression
;
NofixRel = LP , ExpSep , ( Expression , ERP | ExpressionList , SRP ) ;
Application = PrefixApp
| PostfixApp
| InfixApp
| NofixApp
;
PrefixApp = PRE , Expression
| L , ExpSep , ( Expression , ERE | ExpressionList , SRE ) , Expression
;
PostfixApp = Expression , POST
| Expression , EL , ExpSep , ( Expression , ER | ExpressionList , SR )
;
InfixApp = Expression , I , Expression
| Expression , EL , ExpSep ,
( Expression , ERE | ExpressionList , SRE ) , Expression
;
NofixApp = L , ExpSep , ( Expression , ER | ExpressionList , SR ) ;
ExpSep = { Expression , ES | ExpressionList , SS } ;
ExpressionList = [ Expression , { ;-tok , Expression } ] ;
